

- [Java NIO](#java-nio)
  - [一、Java NIO概述](#%E4%B8%80java-nio%E6%A6%82%E8%BF%B0)
    - [1.1、Channel和Buffer ](#11channel%E5%92%8Cbuffer)
    - [1.2、Selector](#12selector)
  - [ 二、Channel ](#%E4%BA%8Cchannel)
    - [2.1、Channel的实现](#21channel%E7%9A%84%E5%AE%9E%E7%8E%B0)
    - [2.2、基本示例](#22%E5%9F%BA%E6%9C%AC%E7%A4%BA%E4%BE%8B)
  - [三、Buffer](#%E4%B8%89buffer)
    - [3.1、Buffer的基本用法](#31buffer%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95)
    - [3.2、Buffer的capacity、position和limit](#32buffer%E7%9A%84capacityposition%E5%92%8Climit)
    - [3.3、Buffer的类型](#33buffer%E7%9A%84%E7%B1%BB%E5%9E%8B)
    - [3.4、Buffer的分配](#34buffer%E7%9A%84%E5%88%86%E9%85%8D)
    - [3.5、向Buffer中写数据](#35%E5%90%91buffer%E4%B8%AD%E5%86%99%E6%95%B0%E6%8D%AE)
    - [3.6、从Buffer中读数据](#36%E4%BB%8Ebuffer%E4%B8%AD%E8%AF%BB%E6%95%B0%E6%8D%AE)
    - [3.7、Buffer中的方法](#37buffer%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95)
  - [四、Scatter和Gather](#%E5%9B%9Bscatter%E5%92%8Cgather)
    - [4.1、Scattering Reads](#41scattering-reads)
    - [4.2、Scattering Writes](#42scattering-writes)
  - [五、通道间的数据传输](#%E4%BA%94%E9%80%9A%E9%81%93%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93)
    - [5.1、transferFrom()](#51transferfrom)
    - [5.2、transferTo()](#52transferto)
  - [六、Selector](#%E5%85%ADselector)
    - [6.1、为什么要使用Selector？](#61%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8selector)
    - [6.2、Selector的创建](#62selector%E7%9A%84%E5%88%9B%E5%BB%BA)
    - [6.3向Selector注册通道](#63%E5%90%91selector%E6%B3%A8%E5%86%8C%E9%80%9A%E9%81%93)
    - [](#)





## Java NIO ##
>参考并发编程网：http://ifeve.com/overview/

* [一、Java NIO概述](#Summary)
    * [1.1、Channel和Buffer](#Summary_1)
    * [1.2、Selector](#Summary_2)
* [二、Channel](#Channel)
    * [2.1、Channel的实现](#Channel_1)
    * [2.2、基本示例](#Channel_2)
* [三、Buffer](#Buffer)
    * [3.1、Buffer的基本用法](#Buffer_1)
    * [3.2、Buffer的capacity、position和limit](#Buffer_2)
    * [3.3、Buffer的类型](#Buffer_3)
    * [3.4、Buffer的分配](#Buffer_4)
    * [3.5、向Buffer中写数据](#Buffer_5)
    * [3.6、从Buffer中读数据](#Buffer_6)
    * [3.7、Buffer中的方法](#Buffer_7)
* [四、Scatter和Gather](#Scatter&Gather)
    * [4.1、Scattering Reads](#Scatter&Gather_1)
    * [4.2、Scattering Writes](#Scatter&Gather_2)
* [五、通道间的数据传输](#ChannelsDataTransfer)
    * [5.1、transferFrom()](#ChannelsDataTransfer_1)
    * [5.2、transferTo()](#ChannelsDataTransfer_1)

<h3 id="Summary">一、Java NIO概述</h3> 

NIO又称为新IO或非阻塞IO，由以下几个核心部分组成：

- Channels
- Buffers
- Selectors

<h4 id="Summary_1">1.1、Channel和Buffer </h4>
基本上，所有的 IO 在NIO 中都从一个Channel 开始。Channel 有点象流。 数据可以从Channel读到Buffer中，也可以从Buffer 写到Channel中。

Channel和Buffer有好几种类型。下面是JAVA NIO中的一些主要Channel的实现：

- FileChannel，文件IO
- DatagramChannel，UDP网络IO
- SocketChannel，TCP网络IO
- ServerSocketChannel，TCP网络IO

以下是Java NIO里关键的Buffer实现：

- ByteBuffer
- CharBuffer
- DoubleBuffer
- FloatBuffer
- IntBuffer
- LongBuffer
- ShortBuffer

这些Buffer覆盖了你能通过IO发送的基本数据类型：byte, short, int, long, float, double 和 char。

<h4 id="Summary_2">1.2、Selector</h4>
Selector允许单线程处理多个Channel。如果你的应用打开了多个连接（Channel），但每个连接的流量都很低，使用Selector就会很方便。例如，在一个聊天服务器中。

**缺图 selector**

要使用Selector，得向Selector注册Channel，然后调用select()方法。这个方法会一直阻塞到某个注册的通道有事件就绪。一旦这个方法返回，线程就可以处理这些事件，事件的例子有如新连接进来，数据接收等。


<h3 id="Channel"> 二、Channel </h3>
Java NIO的通道类似流，但又有些不同：

- 既可以从通道中读取数据，也可以写数据到通道。但流的读写通常是单向的。
- 通道可以异步读写。
- 通道中的数据总是先要读到一个Buffer，或者总要从一个Buffer中写入。

<h4 id="Channel_1">2.1、Channel的实现</h4>
这些是Java NIO中最重要的通道实现。

- FileChannel，文件IO
- DatagramChannel，UDP网络IO
- SocketChannel，TCP网络IO
- ServerSocketChannel，TCP网络IO

<h4 id="Channel_2">2.2、基本示例</h4>
下面是一个使用FileChannel读取数据到Buffer中的示例：

    RandomAccessFile file = new RandomAccessFile("data/a.txt", "rw");
    FileChannel channel = file.getChannel();
    
    ByteBuffer buf = ByteBuffer.allocate(64);
    int reader = channel.read(buf);
    while (reader != -1) {
        // 转换到读模式
        buf.flip();
        while (buf.hasRemaing()) {
            System.out.println(buf.get());        
        }
        // 清空缓冲区，position置为0，limit置为capacity?
        buf.clear();
        reader = channel.read(buf);
    }
    file.close();
    
<h3 id="Buffer">三、Buffer</h3>
Java NIO中的Buffer用于和NIO通道进行交互。如你所知，数据是从通道读入缓冲区，从缓冲区写入到通道中的。

缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。

<h4 id="Buffer_1">3.1、Buffer的基本用法</h4>
使用Buffer读写数据一般遵循以下四个步骤：

1. 写数据到Buffer
2. 调用flip()方法
3. 从Buffer中读取数据
4. 调用clear()方法或compact()方法

当向buffer写入数据时，buffer会记录下写了多少数据。一旦要读取数据，需要通过flip()方法将Buffer从写模式切换到读模式。在读模式下，可以读取之前写入到buffer的所有数据。

一旦读完了所有的数据，就需要清空缓冲区，让它可以再次被写入。有两种方式能清空缓冲区：调用clear()或compact()方法。clear()方法会清空整个缓冲区。compact()方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起始处，新写入的数据将放到缓冲区未读数据的后面。

<h4 id="Buffer_2">3.2、Buffer的capacity、position和limit</h4>
缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。

为了理解Buffer的工作原理，需要熟悉它的三个属性：

- capacity
- position
- limit

大小关系：capacity >= limit >= position

position和limit的含义取决于Buffer处在读模式还是写模式。不管Buffer处在什么模式，capacity的含义总是一样的。

这里有一个关于capacity，position和limit在读写模式中的说明，详细的解释在插图后面。

**缺图 Buffer读写模式属性**

**capacity**
作为一个内存块，Buffer有一个固定的大小值，也叫“capacity”.你只能往里写capacity个byte、long，char等类型。一旦Buffer满了，需要将其清空（通过读数据或者清除数据）才能继续写数据往里写数据。

**position**
当你写数据到Buffer中时，position表示当前写入位置。初始的position值为0。当一个byte、long等数据写到Buffer后， position会向前移动到下一个可插入数据的Buffer单元。

**limit**
在写模式下，Buffer的limit表示你最多能往Buffer里写多少数据。 写模式下，limit等于Buffer的capacity。

当切换Buffer到读模式时， limit表示你最多能读到多少数据。因此，当切换Buffer到读模式时，limit会被设置成写模式下的position值。换句话说，你能读到之前写入的所有数据（limit被设置成已写数据的数量，这个值在写模式下就是position）

<h4 id="Buffer_3">3.3、Buffer的类型</h4>
Java NIO 有以下Buffer类型：

- ByteBuffer
- MappedByteBuffer
- CharBuffer
- DoubleBuffer
- FloatBuffer
- IntBuffer
- LongBuffer
- ShortBuffer

如你所见，这些Buffer类型代表了不同的数据类型。换句话说，就是可以通过char，short，int，long，float 或 double类型来操作缓冲区中的字节。

MappedByteBuffer 有些特别，在涉及它的专门章节中再讲。

<h4 id="Buffer_4">3.4、Buffer的分配</h4>
要想获得一个Buffer对象首先要进行分配。 每一个Buffer类都有一个allocate方法。下面是一个分配64字节capacity的ByteBuffer的例子。
   
    ByteBuffer buf = ByteBuffer.allocate(64);
    
这是分配一个可存储1024个字符的CharBuffer：
    
    CharBuffer buf = CharBuffer.allocate(1024);
    
<h4 id="Buffer_5">3.5、向Buffer中写数据</h4>
写数据到Buffer有两种方式：

- 从Channel写到Buffer
- 通过Buffer的put()方法写到Buffer

从Channel写到Buffer的例子：

    int reader = channel.read(buf);
    
通过put方法：

    buf.put(1);
  
put方法有很多版本，允许你以不同的方式把数据写入到Buffer中。例如， 写到一个指定的位置，或者把一个字节数组写入到Buffer。 更多Buffer实现的细节参考JavaDoc。


<h4 id="Buffer_6">3.6、从Buffer中读数据</h4>
从Buffer中读取数据有两种方式：

- 从Buffer读取数据到Channel。
- 使用get()方法从Buffer中读取数据。

从Buffer读取数据到Channel的例子：

    int writer = channel.writer(buf);
    
 使用get()方法从Buffer中读取数据的例子：
 
    byte b = buf.get();
    
get方法有很多版本，允许你以不同的方式从Buffer中读取数据。例如，从指定position读取，或者从Buffer中读取数据到字节数组。更多Buffer实现的细节参考JavaDoc。

<h4 id="Buffer_7">3.7、Buffer中的方法</h4>

**rewind()方法：**

Buffer.rewind()将position设回0，所以你可以重读Buffer中的所有数据。limit保持不变，仍然表示能从Buffer中读取多少个元素（byte、char等）。

**flip()方法：**

flip方法将Buffer从写模式切换到读模式。调用flip()方法会将position设回0，并将limit设置成之前position的值。
换句话说，position现在用于标记读的位置，limit表示之前写进了多少个byte、char等 —— 现在能读取多少个byte、char等。

**clear()和compact()方法：**

一旦读完Buffer中的数据，需要让Buffer准备好再次被写入。可以通过clear()或compact()方法来完成。

如果调用的是clear()方法，position将被设回0，limit被设置成 capacity的值。换句话说，Buffer 被清空了。Buffer中的数据并未清除，只是这些标记告诉我们可以从哪里开始往Buffer里写数据。

如果Buffer中有一些未读的数据，调用clear()方法，数据将“被遗忘”，意味着不再有任何标记会告诉你哪些数据被读过，哪些还没有。

如果Buffer中仍有未读的数据，且后续还需要这些数据，但是此时想要先先写些数据，那么使用compact()方法。

compact()方法将所有未读的数据拷贝到Buffer起始处。然后将position设到最后一个未读元素正后面。limit属性依然像clear()方法一样，设置成capacity。现在Buffer准备好写数据了，但是不会覆盖未读的数据。

**mark()和reset()方法：**

通过调用Buffer.mark()方法，可以标记Buffer中的一个特定position。之后可以通过调用Buffer.reset()方法恢复到这个position。例如：

    buf.mark();
    调用buf.get()多次
    buf.reset();    // 将position设置成mark时候的
    
**equals()与compareTo()方法**

可以使用equals()和compareTo()方法两个Buffer。

**equals()**
满足下列条件时，表示两个Buffer相等：

1. 相同的类型（byte、char、int等）
2. Buffer中剩余的byte、char等的个数相等
3. Buffer中剩余的byte、char等都相同

如你所见，equals只是比较Buffer的一部分，不是每一个在它里面的元素都比较。实际上，它只比较Buffer中的剩余元素，例如：

    ByteBuffer buf1 = ByteBuffer.allocate(64);
    ByteBuffer buf2 = ByteBuffer.allocate(64);
    buf1.put("cccc".getBytes());
    buf2.put("accc".getBytes());
    System.out.println(buf1.equals(buf2));
    buf1.flip();
    buf2.flip();
    System.out.println(buf1.equals(buf2));
    
结果：第一个true，第二个false

**compareTo()**

compareTo()方法比较两个Buffer的剩余元素(byte、char等)， 如果满足下列条件，则认为一个Buffer“小于”另一个Buffer：

- 第一个不相等的元素小于另一个Buffer中对应的元素 。
- 所有元素都相等，但第一个Buffer比另一个先耗尽(第一个Buffer的元素个数比另一个少)。

**剩余元素，也就是说position到limit之间的元素**


<h3 id="Scatter&Gather">四、Scatter和Gather</h3>
Java NIO开始支持scatter/gather，scatter/gather用于描述从Channel（译者注：Channel在中文经常翻译为通道）中读取或者写入到Channel的操作。
分散（scatter）从Channel中读取是指在读操作时将读取的数据写入多个buffer中。因此，Channel将从Channel中读取的数据“分散（scatter）”到多个Buffer中。
聚集（gather）写入Channel是指在写操作时将多个buffer的数据写入同一个Channel，因此，Channel 将多个Buffer中的数据“聚集（gather）”后发送到Channel。

scatter / gather经常用于需要将传输的数据分开处理的场合，例如传输一个由消息头和消息体组成的消息，你可能会将消息体和消息头分散到不同的buffer中，这样你可以方便的处理消息头和消息体。

<h4 id="Scatter&Gather_1">4.1、Scattering Reads</h4>
Scattering Reads是指数据从一个channel读取到多个buffer中。如下图描述：

缺图：Scattering Reads

代码示例如下：

    ByteBuffer header = ByteBuffer.allocate(1024);
    ByteBuffer body = ByteBuffer.allocate(1024);
    ByteBuffer[] bufArray = { header, body };
    channel.read(bufferArray);

注意buffer首先被插入到数组，然后再将数组作为channel.read() 的输入参数。read()方法按照buffer在数组中的顺序将从channel中读取的数据写入到buffer，当一个buffer被写满后，channel紧接着向另一个buffer中写。

Scattering Reads在移动下一个buffer前，必须填满当前的buffer，这也意味着它不适用于动态消息(译者注：消息大小不固定)。换句话说，如果存在消息头和消息体，消息头必须完成填充（例如 1024byte），Scattering Reads才能正常工作。

<h4 id="Scatter&Gather_2">4.2、Scattering Writes</h4>
Gathering Writes是指数据从多个buffer写入到同一个channel。如下图描述：

缺图：Gathering Writes

代码示例如下：

    ByteBuffer header = ByteBuffer.allocate(1024);
    ByteBuffer body = ByteBuffer.allocate(1024);
    ByteBuffer[] bufArray = { header, body };
    channel.write(bufferArray);
    
buffers数组是write()方法的入参，write()方法会按照buffer在数组中的顺序，将数据写入到channel，注意只有position和limit之间的数据才会被写入。因此，如果一个buffer的容量为128byte，但是仅仅包含58byte的数据，那么这58byte的数据将被写入到channel中。因此与Scattering Reads相反，Gathering Writes能较好的处理动态消息。

<h3 id="ChannelsDataTransfer">五、通道间的数据传输</h3>
在Java NIO中，如果两个通道中有一个是FileChannel，那你可以直接将数据从一个channel（译者注：channel中文常译作通道）传输到另外一个channel。

<h4 id="ChannelsDataTransfer_1">5.1、transferFrom()</h4>
FileChannel的transferFrom()方法可以将数据从源通道传输到FileChannel中（译者注：这个方法在JDK文档中的解释为将字节从给定的可读取字节通道传输到此通道的文件中）。下面是一个简单的例子：

    FileChannel fromChannel = new RandomAccessFile("f:/a.txt", "rw").getChannel();
    FileChannel toChannel = new RandomAccessFile("f:/b.txt", "rw").getChannel();
    toChannel.transferFrom(fromChannel, 0, fromChannel.size());

方法的输入参数position表示从position处开始向目标文件写入数据，count表示最多传输的字节数。如果源通道的剩余空间小于 count 个字节，则所传输的字节数要小于请求的字节数。
此外要注意，在SoketChannel的实现中，SocketChannel只会传输此刻准备好的数据（可能不足count字节）。因此，SocketChannel可能不会将请求的所有数据(count个字节)全部传输到FileChannel中。

<h4 id="ChannelsDataTransfer_2">5.2、transferTo()</h4>
transferTo()方法将数据从FileChannel传输到其他的channel中。下面是一个简单的例子：

    FileChannel fromChannel = new RandomAccessFile("f:/a.txt", "rw").getChannel();
    FileChannel toChannel = new RandomAccessFile("f:/b.txt", "rw").getChannel();
    fromChannel.transferTo(0, fromChannel.size(), toChannel);
是不是发现这个例子和前面那个例子特别相似？除了调用方法的FileChannel对象不一样外，其他的都一样。
上面所说的关于SocketChannel的问题在transferTo()方法中同样存在。SocketChannel会一直传输数据直到目标buffer被填满。

<h3 id="Selector">六、Selector</h3>
Selector（选择器）是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。

<h4 id="Selector_1">6.1、为什么要使用Selector？</h4>
仅用单个线程来处理多个Channels的好处是，只需要更少的线程来处理通道。事实上，可以只用一个线程处理所有的通道。对于操作系统来说，线程之间上下文切换的开销很大，而且每个线程都要占用系统的一些资源（如内存）。因此，使用的线程越少越好。

但是，需要记住，现代的操作系统和CPU在多任务方面表现的越来越好，所以多线程的开销随着时间的推移，变得越来越小了。实际上，如果一个CPU有多个内核，不使用多任务可能是在浪费CPU能力。不管怎么说，关于那种设计的讨论应该放在另一篇不同的文章中。在这里，只要知道使用Selector能够处理多个通道就足够了。

<h4 id="Selector_2">6.2、Selector的创建</h4>
通过调用Selector.open()方法创建一个Selector，如下：

    Selector selector = Selector.open();

<h4 id="Selector_3">6.3向Selector注册通道</h4>
为了将Channel和Selector配合使用，必须将channel注册到selector上。通过SelectableChannel.register()方法来实现，如下：

    channel.configureBlocking(false);
    SelectionKey key = channel.register(selector, SelectionKey.OP_READ);
与Selector一起使用时，Channel必须处于非阻塞模式下。这意味着不能将FileChannel与Selector一起使用，因为FileChannel不能切换到非阻塞模式。而套接字通道都可以。

注意register()方法的第二个参数。这是一个“interest集合”，意思是在通过Selector监听Channel时对什么事件感兴趣。可以监听四种不同类型的事件：

1. Connect
2. Accept
3. Read
4. Write

通道触发了一个事件意思是该事件已经就绪。所以，某个channel成功连接到另一个服务器称为“连接就绪”。一个server socket channel准备好接收新进入的连接称为“接收就绪”。一个有数据可读的通道可以说是“读就绪”。等待写数据的通道可以说是“写就绪”。

这四种事件用SelectionKey的四个常量来表示：

1. SelectionKey.OP_CONNECT
2. SelectionKey.OP_ACCEPT
3. SelectionKey.OP_READ
4. SelectionKey.OP_WRITE

如果你对不止一种事件感兴趣，那么可以用“位或”操作符将常量连接起来，如下：

    int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;
 
<h4 id="">



